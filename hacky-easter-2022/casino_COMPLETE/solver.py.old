#!/usr/bin/env python3

from pwn import *
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

# NIST P-256 curve
p = 115792089210356248762697446949407573530086143415290314195533631308867097853951
b = 0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b

curve = EllipticCurve(GF(p), [-3,b])
P = curve.lift_x(15957832354939571418537618117378383777560216674381177964707415375932803624163)
Q = curve.lift_x(66579344068745538488594410918533596972988648549966873409328261501470196728491)

# P = dQ
d = Q.discrete_log(P)

# Leaked internal random state
r2 = 430913958663692547538740980984064955605384475856896557629511899566377311567

def get_random(state):
    sP = state * P
    r = Integer(sP[0])
    rQ = r * Q
    return Integer(rQ[0])>>8

def validate(key):
    aes_key = SHA256.new(key.encode('ascii')).digest()
    cipher = AES.new(aes_key, AES.MODE_ECB)
    msg = cipher.decrypt(ct)
    if b"utflag" in msg:
        log.info(msg)
        return True
    return False

# Bruteforce last 8 bits of internal state
_log = log.progress('bruteforce')

r_x_guess = r2 << 8
for i in range(256):
    try:
        R = curve.lift_x(r_x_guess)
        next_state_guess = Integer((d * R)[0])
        _log.status(f"{i}")

        next_random = get_random(next_state_guess)
        if validate(str(next_random)):
            _log.success(f"state = {next_state_guess}")
            break
    except ValueError:
        pass
    r_x_guess += 1
